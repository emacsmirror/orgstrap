# -*- mode: org; orgstrap-cypher: sha256; orgstrap-norm-func-name: orgstrap-norm-func--prp-1\.1; orgstrap-block-checksum: 7471d2eeba9ea4df25c7051d8620ac09590e48e997c89d655464dc1e4e3260a7; -*-
# [[orgstrap][jump to the orgstrap block for this file]]
#+title: Executable Org files

#+name: orgstrap-shebang
#+begin_src bash :eval never :results none
{ __p=$(mktemp -d);touch ${__p}/=;chmod +x ${__p}/=;__op=$PATH;PATH=${__p}:$PATH;} > ${null="/dev/null"}
$file= $MyInvocation.MyCommand.Source
$ErrorActionPreference= "silentlycontinue"
file=$0
args=$@
$ErrorActionPreference= "Continue"
{ PATH=$__op;rm ${__p}/=;rmdir ${__p};} > $null
emacs -batch -no-site-file -eval "(let (vc-follow-symlinks) (defun orgstrap--confirm-eval (l _) (not (memq (intern l) '(elisp emacs-lisp)))) (let ((file (pop argv))) (find-file-literally file)) (let ((enable-local-eval t) (enable-local-variables :all) (major-mode 'org-mode)) (require 'org) (org-set-regexps-and-options) (hack-local-variables)))" "${file}" -- $args
exit
<# powershell open
#+end_src

The above block is visible in this file to illustrate how it works.
Normally it would include =:exports none= to make it invisible.
=#+begin_src bash :eval never :results none :exports none=

This block acts as a shebang that makes Org files executable on
=bash=, =bash --posix=, =zsh=, =dash=, =pwsh=, and =powershell=.  It
may also work on other posix shells, but they have been tested.  For
=pwsh= and =powershell= the file should be symlinked to have a =.ps1=
file extension.

It is beyond annoying that this block has to use =mktemp -d= in order
to add ~=~ to the path because not only does =dash= not support the
=function= keyword, but it also arbitrarily prevents defining a
function with the name ~=~. As a result the only portable way to get
~=~ on the path is to create an executable file for it.

Here is a breakdown of the elisp that appears in the =-eval= string.
#+name: shebang-explication
#+begin_src elisp
(let (vc-follow-symlinks) ; don't follow symlinks as there is no way
  ;; to prevent them from opening in `org-mode' due to an oversight
  ;; in `vc-follow-link' if for whatever reason you need to work
  ;; from the truename of the file then the adjustment can be made
  ;; in the orgstrap block itself

  (defun orgstrap--confirm-eval (l _) (not (memq (intern l) '(elisp emacs-lisp))))
  ;; allow elisp blocks to run without prompting, this bypasses the
  ;; usual orgstrap safeguards but when running as a script there are
  ;; other mechanisms that preven automatic execution we use `intern'
  ;; here to avoid having to escape strings which breaks powershell

  (let ((file (pop argv))) ; file is passed on argv to avoid needing to
    ;; escape double quotes with the nice side effect that it can
    ;; handle file names with a literal double quote

    ;; `find-file-literally' avoids org-mode which can take over 500ms
    (find-file-literally file))

  (let ((enable-local-eval t) ; when running as a script other means
        ;; there are other means of preventing arbitrary execution
        (enable-local-variables :all) ; allow all local variables

        ;; fake setting the major mode to org-mode so that
        ;; `org-set-regexp-and-options' will trigger correctly
        (major-mode 'org-mode))
    ;; we do not set `enable-local-eval' and `enable-local-variables'
    ;; in the outer let due to a bug in Emacs 26 and 27 inside of
    ;; `find-file-noselect' where `enable-local-eval' is not properly
    ;; shadowed see Emacs a1fd11a28f3c2f4f81163765dd3b53e5ce0b39cf
    (require 'org) ; `org-set-regexps-and-options' is not an autoload
    ;; so we have to require org to get it
    (org-set-regexps-and-options) ; `org-complex-heading-regexp' must be bound
    ;; otherwise orgstrap blocks that use noweb will cause errors

    ;; run the orgstrap block without entering org-mode, this saves lots of time
    (hack-local-variables)))
#+end_src

#+begin_src elisp :exports none
(orgstrap--with-block "shebang-explication"
  (let (print-level print-length)
    (prin1-to-string (read body))))
#+end_src

#+RESULTS:
: (let (vc-follow-symlinks) (defun orgstrap--confirm-eval (l _) (not (memq (intern l) '(elisp emacs-lisp)))) (let ((file (pop argv))) (find-file-literally file)) (let ((enable-local-eval t) (enable-local-variables :all) (major-mode 'org-mode)) (require 'org) (org-set-regexps-and-options) (hack-local-variables)))

This is an older version of the block that is more verbose and that
also does not work on Debian and friends because =dash= does not
support the =function= keyword. The development workflow is also
significantly more annoying and prone to break because the checksums
always have to be updated and kept in sync.

#+name: orgstrap-shebang-block-old
#+begin_src bash :eval never :results none
function = () { :; }
function silentlycontinue () { :; }

$ErrorActionPreference= "silentlycontinue"
null="/dev/stdout"
__FILE="${0}"
__PARGS=${@}
function posix () {
    test $ZSH_VERSION && { setopt shwordsplit; _IFS=$IFS; unset IFS; }
    emacs --quick --batch --load ~/.emacs.d/orgstrap-developer-checksums.el --load ~/.emacs.d/orgstrap-batch-helper.el --visit "${__FILE}" -- ${__PARGS}
    test $ZSH_VERSION && { unsetopt shwordsplit; IFS=$_IFS; }
}
"posix" > $null
"exit" > $null
$ErrorActionPreference= "Continue"

$org=$MyInvocation.MyCommand.Source
emacs --quick --batch --load ~/.emacs.d/orgstrap-batch-helper.el --visit $org -- $args
exit
<# open powershell comment
#+end_src

* Issues
** TODO cannot use a ~mode: org;~ local variable, it triggers ~hack-local-variables~ twice somehow
setting an explicit mode =mode: org;= in the file causes hack local variables to try to run itself twice recursively.
#+begin_src bash :eval never
emacs -q -Q -eval "(let ((file (pop argv))) (find-file-literally file) (hack-local-variables))" "./shebang.org"
#+end_src

* Bootstrap :noexport:

#+name: nowhere
#+begin_src elisp
(message "noweb working")
#+end_src

#+name: orgstrap
#+begin_src elisp :results none :lexical yes :noweb yes
(message "I am an executable Org file!") ; (ref:test)
(message "file name is: %S" buffer-file-name)
(message "file truename is: %S" buffer-file-truename)
<<nowhere>>
(unless (featurep 'ow) (load "~/git/orgstrap/ow.el"))
(ow-cli-gen
    ((:test))
  (message "running ow-cli-gen block ..."))
(message "post cli-gen")
#+end_src

[[(test)]] Make sure coderefs work.

** Local Variables :ARCHIVE:
# close powershell comment #>
# Local Variables:
# eval: (progn (setq-local orgstrap-min-org-version "8.2.10") (let ((actual (org-version)) (need orgstrap-min-org-version)) (or (fboundp #'orgstrap--confirm-eval) (not need) (string< need actual) (string= need actual) (error "Your Org is too old! %s < %s" actual need))) (defun orgstrap-norm-func--prp-1\.1 (body) (let (print-quoted print-length print-level) (prin1-to-string (read (concat "(progn\n" body "\n)"))))) (unless (boundp 'orgstrap-norm-func) (defvar orgstrap-norm-func orgstrap-norm-func-name)) (defun orgstrap-norm-embd (body) (funcall orgstrap-norm-func body)) (unless (fboundp #'orgstrap-norm) (defalias 'orgstrap-norm #'orgstrap-norm-embd)) (defun orgstrap-org-src-coderef-regexp (_fmt &optional label) (let ((fmt org-coderef-label-format)) (format "\\([:blank:]*\\(%s\\)[:blank:]*\\)$" (replace-regexp-in-string "%s" (if label (regexp-quote label) "\\([-a-zA-Z0-9_][-a-zA-Z0-9_ ]*\\)") (regexp-quote fmt) nil t)))) (unless (fboundp #'org-src-coderef-regexp) (defalias 'org-src-coderef-regexp #'orgstrap-org-src-coderef-regexp)) (defun orgstrap--expand-body (info) (let ((coderef (nth 6 info)) (expand (if (org-babel-noweb-p (nth 2 info) :eval) (org-babel-expand-noweb-references info) (nth 1 info)))) (if (not coderef) expand (replace-regexp-in-string (org-src-coderef-regexp coderef) "" expand nil nil 1)))) (defun orgstrap--confirm-eval-portable (lang _body) (not (and (member lang '("elisp" "emacs-lisp")) (let* ((body (orgstrap--expand-body (org-babel-get-src-block-info))) (body-normalized (orgstrap-norm body)) (content-checksum (intern (secure-hash orgstrap-cypher body-normalized)))) (eq orgstrap-block-checksum content-checksum))))) (unless (fboundp #'orgstrap--confirm-eval) (defalias 'orgstrap--confirm-eval #'orgstrap--confirm-eval-portable)) (let (enable-local-eval) (vc-find-file-hook)) (let ((ocbe org-confirm-babel-evaluate) (obs (org-babel-find-named-block "orgstrap"))) (if obs (unwind-protect (save-excursion (setq-local orgstrap-norm-func orgstrap-norm-func-name) (setq-local org-confirm-babel-evaluate #'orgstrap--confirm-eval) (goto-char obs) (org-babel-execute-src-block)) (setq-local org-confirm-babel-evaluate ocbe) (org-set-startup-visibility)) (warn "No orgstrap block."))))
# End:
