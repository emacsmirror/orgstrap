#+title: Reval: Evaluate remote elisp code 

* Introduction
Remote eval. Ephemeral code reuse. Somewhere between load
eval, and securl then load. More auditable and stable curl pipe bash.

There are some significant drawbacks, such as remote files not being
able to resolve xrefs from remote files. It is also not clear whether
to use reval and then save the buffer to disk and the load or whether
it makes more sense to use reval to get securl and then use securl to
get the sources. Unless securl is going to be used for something else
it seems more practical to reval-into-reload, or even just reload to
get the cache benefit in addition to being able to resolve xrefs.

At the moment the serialization of the whole file is used rather than
one of the normalized prp variants. This might be added in the future,
but the objective of reval is to be small enough that it will fit in
the remaining space in the orgstrap elv it probably won't happen.

# FIXME we need some mechanism that can be used to notify/warn that a
# particular checksum version of a file is bad ... I think that having
# some way to retreive/compare to the latest version might work?  but
# if we are slurping urls from github that have an embedded hash how
# the heck can we detect and warn that the old code is bad?  this is a
# fairly big issue :/ maybe &optional latest-url ?  this is all fine
# until you have to figure out the upgrade paths for random calls to
# reval embedded in a file somewhere then it looks like a really bad
# idea ... this is another one of those things where there is a
# strange tradeoff like package managers

See [[info:elisp#Library Headers][Library Headers]] for details
related to ~reval-update~.

~reval-update~ functionality works by leveraging the builtin
functionality of ~package-buffer-info~. To create a file that
can be updated automatically by reval, use the URL: header to
point to a url that resolves to the Latest-Version of the
while it would be nice to use a Latest-Version: header directly
using URL: simplifies the implementation immensely. Note that
~pacakge-buffer-info~ only returns the first occurrence of URL:
or Homepage: so the Latest-Version url must come first. Other
urls can be listed later but will not be included in the parse.

Sadly this is not as simple as one might think. Listing the
Latest-Version url is sufficient to detect that there has been a
change, but then there is the multipath issue of how to obtain a
static url to the exact (new) version of the resource. In addition
to the Latest-Version url you need some url that either redirects
to the static latest. For example the github latest releases url
https://github.com/tgbugs/orgstrap/releases/latest has the desired
redirection behavior. The equivalent for branch refs is
https://api.github.com/repos/tgbugs/orgstrap/git/refs/heads/master.
However you have to deal with the json response there which is the
multipath issue discussed before.

Depending on how far things like git-share go, mirrors could be listed
Mirror-List: or something? If we do that then Latest-Version can be used
this is useful only after a user has been able to resolve a copy
after which a local mirrors list could be created.

| file-exists-p | checksum-match | multi | signal | elisp? | buffer   |
|---------------+----------------+-------+--------+--------+----------|
| t             | t              | t     | warn   | t      | evaled   |
| nil           | t              | t     | warn   | t      | kill     |
| t             | nil            | t     | warn   | t      | failed   |
| nil           | nil            | t     | warn   | t      | kill     |
| t             | t              | nil   | error  | t      | evaled   |
| nil           | t              | nil   | error  | t      | kill     |
| t             | nil            | nil   | error  | t      | failed   |
| nil           | nil            | nil   | error  | t      | kill     |
|---------------+----------------+-------+--------+--------+----------|
| t             | t              | t     | warn   | nil    | *failed* |
| nil           | t              | t     | warn   | nil    | kill     |
| t             | nil            | t     | warn   | nil    | failed   |
| nil           | nil            | t     | warn   | nil    | kill     |
| t             | t              | nil   | error  | nil    | *failed* |
| nil           | t              | nil   | error  | nil    | kill     |
| t             | nil            | nil   | error  | nil    | failed   |
| nil           | nil            | nil   | error  | nil    | kill     |


TODO need a way to ensure that reval maximal can run itself again on same
inputs without having to invoke again, maybe a dynamic variable in minimal?
* Notes
The general approach here is to provide a very lightweight way to get
the functionality needed for an orgstrap block into that block in a
way that allows for some level of code reuse. Thus ~reval~ should be
doing as little work as possible to get to a point where a real
package manager can take over (e.g. it is probably better to reval in
a file that can install quelpa something like that for unpublished
packages, on the other hand, the simplicity of a reval expression
means that there are fewer things that can go wrong). The minimal
~reval~ implementation pretty much has to be included in the orgstrap
block. This is unfortunate, but since I do have machinery in orgstrap
to clone blocks, it seems reasonable to have a reval minimal block
that can be used with orgstrap clone and that should be reasonably
easy to keep up to date, though hopefully also the need to do that
will be small since it should be fairly stable.

All of this to say that ~reval~ is intentionally minimal, and should
be used compositionally in expressions like the following.
#+begin_src elisp
(unless (featurep 'file) (reval 'sha256 ? "https://example.org/file.el"))
#+end_src
* Issues
** TODO Diff when updating
:PROPERTIES:
:CREATED:  [2020-11-28 Sat 22:56]
:END:
It is hard to audit a whole file every single time it is updated.
When update is called and there is an existing immutable url or a
cached version of the hash the new version should be diffed against
the existing version and the changes should be displayed for easier
review.
* reval.el
** tangles
#+begin_src elisp :noweb no-export :tangle ./reval.el :lexical yes
;;; reval.el --- Remote elisp eval. -*- lexical-binding: t -*-

;; Author: Tom Gillespie
;; Homepage: https://github.com/tgbugs/orgstrap
;; Version: 9999
;; Package-Requires: ((emacs "24.4"))
;; Is-Version-Of: https://raw.githubusercontent.com/tgbugs/orgstrap/master/reval.el
;; Reval-Get-Immutable: reval--reval-update

;;;; License and Commentary

;; License:
;; SPDX-License-Identifier: GPL-3.0-or-later

;;; Commentary:

;; reval.el implements eval of remote elisp code. More accurately
;; it implements local evaluation of remote elisp in a way that is
;; somewhat secure.

;;; Code:

<<reval-impl>>

(defun reval--reval-update ()
  "Get the immutable url for the current remote version of this file."
  (reval-get-imm-github "tgbugs" "orgstrap" "reval.el"))

(provide 'reval)

;;; reval.el ends here

#+end_src
** code
*** minimal
:PROPERTIES:
:CUSTOM_ID: minimal
:END:
This will be a common starter block for orgstrap.
#+name: reval-minimal-block
#+begin_src elisp :noweb no-export
(unless (featurep 'reval)
  (defvar reval-cache-directory (concat user-emacs-directory "reval/cache/"))
  <<reval-minimal>>
  (defalias 'reval #'reval-minimal)
  (reval ? ? "~/git/orgstrap/reval.el"))
#+end_src

A note on how reval-minimal is different from regular reval.

missing debug features and support for alternate sources
the rationale is that 99% of the time this minimal reval is going
to be used only once to open and eval a file that will also
include the full version, if that first reval fails then
something is wrong enough that users that don't have the full
version installed already are unlikely to be able to debug the
issue on their own

*BIG NOTE ON CACHING* ~reval-minimal~ by itself leaks information when
it is used. Therefore the FIRST AND LAST CALL to ~reval-minimal~
should be to retrieve and evaluate an elisp file that contains version
of ~reval~ that caches retrieved files so that network traffic cannot
be used to reveal when someone is running a file that uses ~reval~.

As much as we want to keep this simple, ~reval-minimal~ must implement
caching so that ~reval.el~ itself can be cached and make use of all
the usual machinery for updates etc. Thus we trade off a bit of
complexity in the implementation of ~reval-minimal~ for massively
reduced complexity everywhere else.

#+name: reval-minimal
#+begin_src elisp
(defun reval-minimal (cypher checksum path-or-url &rest alternates)
  "Simplified and compact implementation of reval."
  (let* ((o url-handler-mode)
         (csn (symbol-name checksum))
         (cache-path (concat reval-cache-directory (substring csn 0 2) "/" csn)))
    (url-handler-mode)
    (unwind-protect
        (cl-loop for path-or-url in (cons cache-path (cons path-or-url alternates))
                 do (when (file-exists-p path-or-url)
                      (let* ((buffer (find-file-noselect path-or-url))
                             (_ (when (string= path-or-url cache-path)
                                  (with-current-buffer buffer (emacs-lisp-mode))))
                             (buffer-checksum (intern (secure-hash cypher buffer))))
                        (if (eq buffer-checksum checksum)
                            (progn
                              (unless (string= path-or-url cache-path)
                                (let ((parent-path (file-name-directory cache-path)))
                                  (unless (file-directory-p parent-path)
                                    (make-directory parent-path t))
                                  (with-current-buffer buffer
                                    (write-file cache-path))))
                              (eval-buffer buffer))
                          (kill-buffer buffer) ; kill so cannot accidentally evaled
                          (error "reval: checksum mismatch! %s" path-or-url)))))
      (unless o
        (url-handler-mode 0)))))
#+end_src
*** maximal
#+name: reval-impl
#+begin_src elisp :lexical yes :results none
(defcustom reval-default-cypher 'sha256
  "Default cypher to use to fill in a hole in `reval'."
  :type 'symbol
  :options (secure-hash-algorithms))

(defvar reval-cache-directory (concat user-emacs-directory "reval/cache/")
  "The directory where retrieved .el files are saved.")

(defvar reval-failed-buffer-list nil "List of failed reval buffers.")

(defvar reval-evaled-buffer-list nil "List of evaled reval buffers.")

(defmacro with-url-handler-mode (&rest body)
  "Run BODY with `url-handler-mode' enabled."
  (declare (indent defun))
  `(let ((uhm url-handler-mode))
     (unwind-protect
         (progn
           (url-handler-mode)
           ,@body)
       (unless uhm
         (url-handler-mode 0)))))

(defun reval-id->buffer (path-or-url)
  "Given a PATH-OR-URL return a buffer of its contents."
  ;; We explicitly do not catch errors here since they need to
  ;; be caught by the human in the loop later.
  (with-url-handler-mode
    (find-file-noselect path-or-url)))

(defun reval-resum-review (cypher buffer &optional review)
  "Return checksum under CYPHER for BUFFER.
If REVIEW is non-nil then switch to BUFFER and prompt asking if audit
is ok before continuing."
  ;; we don't need to check or review alternates here because they
  ;; must all be identical
  (let (enable-local-eval)
    (save-excursion
      (save-window-excursion
        (with-current-buffer buffer
          (unless (file-exists-p (buffer-file-name))
            ;; NOTE url-handler-mode must be set in the calling context
            ;; this case should not happen, only extant files should make it here
            (error "reval-resum: file does not exist! %s" (buffer-file-name)))
          (when review
            (switch-to-buffer (current-buffer))
            ;; FIXME `yes-or-no-p' still blocks the command loop in >= 27 emacsclient
            (unless (yes-or-no-p "Audit of file ok? ") ; not using `y-or-n-p' since it is too easy
              (error "Audit failed. Checksum will not be calculated for %s"
                     (buffer-file-name (current-buffer)))))

          ;; need to ensure that file is actually elisp
          ;; note that in some cases read can succeed
          ;; even when a file is not elisp e.g. an html
          ;; file can sometimes read without error but
          ;; will fail on eval

          ;; elisp check by major mode
          (unless (eq major-mode 'emacs-lisp-mode)
            (error "Not an emacs lisp file!"))

          ;; elisp check by read
          (condition-case nil
              (read (concat "(progn\n"
                            (buffer-substring-no-properties (point-min) (point-max))
                            "\n)"))
            (error (error "Not an emacs lisp file!")))

          ;; return the checksum
          (intern (secure-hash cypher (current-buffer))))))))

(defun reval-resum-minimal (cypher buffer)
  "Checksum of BUFFER under CYPHER." ; minimal for maximal porability
  ;; not used since the expression takes up less space
  (intern (secure-hash cypher buffer)))

(defalias 'reval-resum #'reval-resum-review)

(defvar reval--make-audit t "Dynamic variable to control audit during `reval--make'")
;; the control of audit behavior is intentionally excluded from the
;; arguments of `reval--make' so that top level calls must audit
(defun reval--make (cypher path-or-url)
  "Make a `reval' expression from CYPHER and PATH-OR-URL.
This should not be used directly at the top level see docs for `reval'
for a better workflow."
  (unless reval--make-audit
    (warn "`reval--make' not auditing %S" path-or-url))
  (let ((checksum (reval-resum-review cypher (reval-id->buffer path-or-url) reval--make-audit)))
    `(reval ',cypher ',checksum ,path-or-url)))

(defun reval-audit (&optional universal-argument)
  "Audit the reval under the cursor." ; FIXME this needs a LOT of work
  (interactive)
  (cl-multiple-value-bind (cypher checksum path-or-url _alternates _b _e) ; FIXME probably loop here
      (reval--form-at-point)
    (let* ((buffer (with-url-handler-mode
                     (find-file-noselect path-or-url)))
           (buffer-checksum (reval-resum cypher buffer t)))
      (eq buffer-checksum checksum))))

(defun reval--add-buffer-to-list (buffer buffer-list-name)
  "Add BUFFER to list at BUFFER-LIST-NAME."
  (with-current-buffer buffer ; FIXME do this in both cases but change which list
    (push buffer (symbol-value buffer-list-name))
    ;; push first since it is better to have a dead buffer linger in a list
    ;; than it is to have an error happen during execution of `kill-buffer-hook'
    (let ((buffer-list-name buffer-list-name))
      (add-hook 'kill-buffer-hook
                (lambda ()
                  ;; read the manual for sets and lists to see why we have to
                  ;; setq here ... essentially if our element is found in the
                  ;; car of the list then the underlying list is not modified
                  ;; and the cdr of the list is returned, therefore if you have
                  ;; a list of all zeros and try to delete zero from it the list
                  ;; will remain unchanged unless you also setq the name to the
                  ;; (now) cdr value
                  (set buffer-list-name
                       (delete (current-buffer) (symbol-value buffer-list-name))))
                nil t))))

(defun reval-cache-path (checksum)
  "Return the path to the local cache for a given checksum."
  (let* ((name (symbol-name checksum))
         (subdir (substring name 0 2)))
    (concat reval-cache-directory subdir "/" name)))

(defun reval--write-cache (buffer cache-path)
  "Write BUFFER to CACHE-PATH. Create the parent if it doesn not exist."
  (let ((parent-path (file-name-directory cache-path)))
    (unless (file-directory-p parent-path)
      (make-directory parent-path t))
    (with-current-buffer buffer
      (write-file cache-path))))

(defun reval-find-cache (&optional universal-argument)
  (interactive)
  (cl-multiple-value-bind (_cypher checksum path-or-url _alternates _b _e)
      (reval--form-at-point)
    (let ((cache-path (reval-cache-path checksum)))
      (if (file-exists-p cache-path)
          (let ((buffer (find-file-noselect cache-path)))
            (with-current-buffer buffer (emacs-lisp-mode))
            (pop-to-buffer-same-window buffer))
        (error "No cache for %s" path-or-url)))))

(defun reval (cypher checksum path-or-url &rest alternates)
  "Open PATH-OR-URL, match CHECKSUM under CYPHER, then eval.
If an error is encountered try ALTERNATES in order.

The simplest way to populate a `reval' expression starting from just
PATH-OR-URL is to write out expression with CYPHER and CHECKSUM as a
nonsense values. For example (reval ? ? \"path/to/file.el\"). Then run
M-x `reval-update-simple' to populate CYPHER and CHECKSUM."

  (let (done
        (cache-path (reval-cache-path checksum)))
    (with-url-handler-mode
      (cl-loop for path-or-url in (cons cache-path (cons path-or-url alternates))
               do (if (file-exists-p path-or-url)
                      (let* ((buffer (reval-id->buffer path-or-url))
                             (_ (when (string= path-or-url cache-path)
                                  (with-current-buffer buffer (emacs-lisp-mode))))
                             ;; FIXME this is still not right ... can error due to not elisp
                             (buffer-checksum (reval-resum cypher buffer)))
                        (if (eq buffer-checksum checksum)
                            (progn
                              (unless (string= path-or-url cache-path)
                                ;; save to cache before eval for xrefs
                                (reval--write-cache buffer cache-path))
                              (eval-buffer buffer)
                              (reval--add-buffer-to-list buffer 'reval-evaled-buffer-list)
                              (setq done t))
                          (reval--add-buffer-to-list buffer 'reval-failed-buffer-list)
                          (funcall (if alternates #'warn #'error)
                                   ;; if alternates warn to prevent an early failure
                                   ;; from blocking later potential successes otherwise
                                   ;; signal an error
                                   "reval: checksum mismatch! %s" path-or-url)))
                    (warn "reval: file does not exist! %s" path-or-url))
               until done))
    (unless done
      (error "reval: all paths failed!")))
  nil)

(defun reval-view-failed ()
  "View top of failed reval buffer stack and kill or keep."
  (interactive)
  (when reval-failed-buffer-list
    (save-window-excursion
      (with-current-buffer (car reval-failed-buffer-list)
        (switch-to-buffer (current-buffer))
        (when (y-or-n-p "Kill buffer? ")
          (kill-buffer))))))

(require 'lisp-mnt)

(defvar url-http-end-of-headers)
(defun reval-url->json (url)  ; see utils.el
  "given a url string return json as a hash table"
  (json-parse-string
   (with-current-buffer (url-retrieve-synchronously url)
     (buffer-substring url-http-end-of-headers (point-max)))))

(defun reval--get-new-immutable-url ()
  (let ((get-imm-name (reval-header-get-immutable)))
    (if get-imm-name
        (let ((get-imm (intern get-imm-name)))
          (if (fboundp get-imm)
              (funcall get-imm)
            (warn "Function %s from Reval-Get-Immutable not found in %s" get-imm-name (buffer-file-name))
            nil))
      (warn "Reval-Get-Immutable: header not found in %s" (buffer-file-name))
      nil)))

(defun reval-get-imm-github (group repo path &optional branch)
  (let* ((branch (or branch "master"))
         (url (format "https://api.github.com/repos/%s/%s/git/refs/heads/%s" group repo branch))
         (sha (gethash "sha" (gethash "object" (reval-url->json url)))))
    (format "https://raw.githubusercontent.com/%s/%s/%s/%s" group repo sha path)))

(defun reval-header-is-version-of (&optional file)
  "Return the Is-Version-Of: header for FILE or current buffer."
  ;; this was originally called Latest-Version but matching the
  ;; datacite relationships seems to make more sense here esp.
  ;; since this is literally the example from the documentation
  (lm-with-file file
    (lm-header "is-version-of")))

(defun reval-header-get-immutable (&optional file)
  "Return the Reval-Get-Immutable: header for File or current buffer.

The value of this header should name a function in the current
file that returns an immutable name that points to the current
remote version of the the current file.

The implementation of the function may assume that the reval
package is present on the system."
  ;; there will always have to be a function because even if the
  ;; remote does all the work for us we will still have to ask the
  ;; remote to actually do the dereference operation, since we can't
  ;; gurantee that all remotes even have endpoints that behave this
  ;; way we can't implement this once in reval, so we ask individual
  ;; files to implement this pattern themselves, or worst case, the
  ;; update function can be supplied at update time if there is a
  ;; useful remote file that doesn't know that it is being revaled
  (lm-with-file file
    (lm-header "reval-get-immutable")))

(defun reval-check-for-updates () ; TODO reval-sync ?
  "Check current buffer revals for updates."
  (interactive)
  ;; search and collect all calls to reval in the current buffer? all org files? ???
  ;; open the current reval in a buffer
  ;; get the package info if avaiable
  ;; warn about all revals that cannot be updated due to missing metadata?

  (message "%S" )
  (error "TODO not implemented"))

(defun reval-update ()
  "Update to latest version."
  )

(defun reval--dquote-symbolp (thing)
  "Matches pattern ''THING.
Useful when dealing with quoted symbols in the outpub or a `read'.
For example elt 2 of '(reval 'sha256 ? \"file.el\")."
  (and (consp thing)
       (eq (car thing) 'quote)
       (consp (cdr thing))
       (symbolp (cadr thing))))

(defun reval--form-at-point ()
  (save-excursion
    (re-search-forward " ")
    (re-search-backward "(reval[[:space:]]")
    (let ((begin (point)))
      (forward-sexp)
      (let ((raw (read (buffer-substring-no-properties begin (point))))
            (end (point)))
        ;;(message "aaaaa: %S %S %S" raw (symbolp (elt raw 1)) (type-of (elt raw 1)))
        (let ((cypher (let ((cy (elt raw 1)))
                        ;; '(sigh 'sigh) XXX the usual eval dangerzone >_<
                        (if (reval--dquote-symbolp cy) (eval cy) reval-default-cypher)))
              (checksum (let ((cs (elt raw 2)))
                          (if (reval--dquote-symbolp cs) (eval cs) nil)))
              (path-or-url (elt raw 3))
              (alternates (cddddr raw)))
          (values cypher checksum path-or-url alternates begin end))))))

(defun reval-checksum-at-point (&optional universal-argument)
  (interactive)
  (cl-multiple-value-bind (_cypher checksum _path-or-url _alternates _b _e)
      (reval--form-at-point)
    checksum))

(defun reval-update-simple (&optional universal-argument)
  "Update the checksum for the reval sexp under the cursor or up the page.
Useful when developing against a local path or a mutable remote id.
If UNIVERSAL-ARGUMENT is non-nil then `reval-audit' is skipped, please use
this functionality responsibly."
  (interactive "P")
  (with-url-handler-mode
    (let ((reval--make-audit (not universal-argument))
          (sigh (point)))
      (cl-multiple-value-bind (cypher checksum path-or-url alternates begin end)
          (reval--form-at-point)
        (unless (memq cypher (secure-hash-algorithms))
          (error "%S is not a known member of `secure-hash-algorithms'" cypher))
        (let ((new (reval--make cypher path-or-url))
              (print-quoted t)
              print-length
              print-level)
          (delete-region begin end)
          (insert (prin1-to-string
                   (if alternates ; don't cons the old checksum, repeated invocations grow
                       (append new (cons ''OLD> alternates))
                     new))))
        (goto-char sigh)))))
#+end_src

See https://emacs.stackexchange.com/a/7577 for why we have to manually
save the position and ~save-excursion~ does nothing in this case.

TODO M-: (insert (package-name--reval-update))
or rather, the reval-confirm workflow which is
1. digest a local file or the master url etc.
2. use reval-header-is-version-of package-name--reval-update
   to get the immutable url in the buffer for that file
3. insert the immutable url and check that they match

A little trick in =M-:= ~(insert (prin1-to-string (read (buffer-string))))~.

The more complex version of this is ~reload~ which includes a cache
where files are stored locally, and the ability to set a preferred
local path from whence a particular hash can be sourced. Given that
reval is intended to be as bare bones as possible so that it can fit
in the remaining elv space, I'm not including the reload functionality
in the main block right now.
#+begin_src elisp
(defcustom reval-alternates-alist nil
  "An alist of ((CHECKSUM location ...) ...)")

(defcustom reval-cache-path nil
  "Override the reval default cache path.")

(defun reval-local-alternate (cypher checksum)
  ""
  ;; check explicit alternates
  ;; check cache
  ;; check default directory
  )
#+end_src
*** reval testing
**** basics
#+begin_src elisp
;; `eval-print-last-sexp'

;; bad since html not elisp
(reval--make 'sha256 "https://github.com/tgbugs/orgstrap/blob/417b87304da27397d3ce1b79039119a9337be305/packages.el")

;; bad 404 file exists but cannot be read ... 404 error or something like that should just fail ?
(reval--make 'sha256 "https://github.com/tgbugs/orgstrap/blob/does-no-exist/packages-does-not-exist.el")

(reval--make 'sha256 "https://raw.githubusercontent.com/tgbugs/orgstrap/does-no-exist/packages-does-not-exist.el")

;; connection error
(reval--make 'sha256 "https://127.0.0.2/connection-error")

(reval--make 'sha256 "https://0.0.0.0/connection-error")

;;(setq debug-on-message "File exists, but cannot be read")
;;(setq debug-on-message nil)

;; ok
(reval--make 'sha256 "https://raw.githubusercontent.com/tgbugs/orgstrap/417b87304da27397d3ce1b79039119a9337be305/packages.el")

;; checksum match
(reval 'sha256 'aada229afa36ac1f3e9f26e1ec7c0c09214d75563adb62aa0fac2f1ae58496fe "https://raw.githubusercontent.com/tgbugs/orgstrap/417b87304da27397d3ce1b79039119a9337be305/packages.el")

;; checksum mismatch
(reval 'sha256 'bada229afa36ac1f3e9f26e1ec7c0c09214d75563adb62aa0fac2f1ae58496fe "https://raw.githubusercontent.com/tgbugs/orgstrap/417b87304da27397d3ce1b79039119a9337be305/packages.el")

;; checksum missing file then match
(reval 'sha256 'aada229afa36ac1f3e9f26e1ec7c0c09214d75563adb62aa0fac2f1ae58496fe
 "packages.el"
 "https://raw.githubusercontent.com/tgbugs/orgstrap/417b87304da27397d3ce1b79039119a9337be305/packages.el")

;; missing file then missing url
(reval 'sha256 'aada229afa36ac1f3e9f26e1ec7c0c09214d75563adb62aa0fac2f1ae58496fe
 "packages.el"
 "https://raw.githubusercontent.com/tgbugs/orgstrap/417b87304da27397d3ce1b79039119a9337be305/packages.el-oops")

;; test whether Emacs can find xrefs in reval buffers

;; local files are of course ok
(reval--make 'sha256 "orgstrap.el")

(reval 'sha256 'cbb890d65aa85180f26cb334ac3ca26880005584a1b7f3910f147762eef0196d "orgstrap.el")

;; the default behavior for emacs does not work
(reval--make 'sha256 "https://raw.githubusercontent.com/tgbugs/orgstrap/38a8c1688f81a54e39f93bf84b7d4907cf03442c/orgstrap.el")

(reval 'sha256 'f25c7aa8c0e40afab8884a67f09e5a6629682bb6e6592c48025b87a7a05c4d98 "https://raw.githubusercontent.com/tgbugs/orgstrap/38a8c1688f81a54e39f93bf84b7d4907cf03442c/orgstrap.el")

#+end_src

Understanding delete
#+begin_src elisp
(defvar asdf '(a a))
(member (car asdf) asdf)
(delete (car asdf) asdf)
asdf
(delete 'a asdf)
(delq 'a asdf)
(setq asdf '(a a))
(setq asdf '(b a b a))

reval-failed-buffer-list
(switch-to-buffer (car reval-failed-buffer-list))
(pop reval-failed-buffer-list)
#+end_src

Thinking about whether there are reasonable ways we could enable more
automated updates. It seems that without a redirect to current head
url that provides known and specified behavior from the server side,
we are stuck implementing all the usual insanity for each vcs, remote
service, etc. I guess a ~Reval-Update:~ header could implement the
processes needed to obtain the latest immutable url might work. Of
course one could always use the prop line local variables for
something like this rather than trying to stuff even more nonsense
into the package metadata. ~setq-local~ only works if the file is
loaded in a buffer though right ... ?

#+begin_src elisp
;; Is-Version-Of: https://raw.githubusercontent.com/tgbugs/orgstrap/master/ow-min.el
;; Dereference: https://api.github.com/repos/tgbugs/orgstrap/git/refs/heads/master#/object/sha -> master
;; Reval-Get-Immutable: ow--reval-update
;; Reval-Update-Url-Func: ow-reval-update-get-immutable-url

(setq-local reval-update-get-immutable-url-function-name #'ow--update-url)

(defun ow--reval-update ()
  "Get the immutable url for the current remote version of this file."
  (reval-get-imm-github "tgbugs" "orgstrap" "ow.el"))

(defun ow--update-url-old ()
  (let ((branch "master")
        (glvt "https://raw.githubusercontent.com/tgbugs/orgstrap/%s/ow-min.el")
        (drvt "https://api.github.com/repos/tgbugs/orgstrap/git/refs/heads/%s"))
    (format glvt (gethash "sha" (gethash "object" (url->json (format drvt branch)))))))
#+end_src
**** update
Run ~reval-update-simple~ on each of these.
#+begin_src elisp
(reval ? ? "orgstrap.el")
(reval reval-default-cypher ? "orgstrap.el")
(reval 'sha512 ? "orgstrap.el")
(reval ? ? "orgstrap-lol-not-here.el") ; should fail
#+end_src

# FIXME if two buffers are open at the same time reval will sometimes select the wrong buffer to insert back into
