# -*- orgstrap-cypher: sha256; orgstrap-block-checksum: b30de1950d8d39b69ecf445bb2b922332fd8506e228e670b0f6560dff2da4697; no-klobber-test: "I should still be here after it is all over!"; -*-
# [[file:::orgstrap][jump to orgstrap block for this file]]
#+title: Bootstrap an org-mode file using file local variables
#+options: num:nil

# [[file:./orgstrap.pdf]]
# [[file:./orgstrap.html]]

=orgstrap= is a specification and tools for standalone self-bootstrapping =org-mode= files.

This file +bootstraps+ orgstraps itself to provide the functionality needed to use
=orgstrap= in any =org-mode= file.

* Getting started
Using =orgstrap= is easy.

1. Obtain the org mode source for this file. (e.g.
   [[https://raw.githubusercontent.com/tgbugs/orgstrap/master/orgstrap.org][from GitHub]]).
2. Open it in emacs (e.g. =M-x= =url-handler-mode=
   =C-x C-f= =https://raw.githubusercontent.com/tgbugs/orgstrap/master/orgstrap.org=)
   [fn::This is usually the most difficult step. See [[file:::#future-work][Future work]]
   for ideas about how to get from zero to emacs.].
4. Decline the file local variables.
5. Inspect the [[orgstrap][orgstrap block]] and file local variables.
7. Reload the file and accept the file local variables.

Congratulations you can now use =orgstrap= with your own files!

Invoke =M-x= =orgstrap-init= to add all
the =orgstrap= machinery to the file in current buffer.

# SOON TM
Alternately if you would prefer a slightly more sane installation experience that
doesn't vanish by default every time you restart emacs until you open this file again,
orgstrap is available on melpa.

The rest of this file is an overview of use cases for =orgstrap= as well as
the implementation of =orgstrap= along with discussion and commentary. Thus
this file is itself an example of how to use =orgstrap=.
* Hello =orgstrap=
The bare minimum needed to make an =org-mode= file executable (with a bit of safety).
#+caption: [[file:./orgstrap-minimal.org]]
#+begin_src org :tangle ./orgstrap-minimal.org
# -*- orgstrap-cypher: sha256; orgstrap-block-checksum: 66ba9b040e22cc1d30b6f1d428b2641758ce1e5f6ff9ac8afd32ce7d2f4a1bae; -*-
# [[file:::orgstrap][jump to orgstrap block for this file]]

,#+name: orgstrap
,#+begin_src elisp :results none :noweb yes
(message "orgstrap successful!")
,#+end_src

=orgstrap= a plain-text executable format.

# Local Variables:
# orgstrap-local-variables-block-version: "0.2"
# eval: (defun orgstrap--confirm-eval (lang body) (not (and (member lang '("elisp" "emacs-lisp")) (eq orgstrap-block-checksum (intern (secure-hash orgstrap-cypher (let ((print-quoted nil) (print-escape-newlines t)) (prin1-to-string (read (concat "(progn\n" body "\n)"))))))))))
# eval: (setq-local org-confirm-babel-evaluate #'orgstrap--confirm-eval)
# eval: (save-excursion (org-babel-goto-named-src-block "orgstrap") (org-babel-execute-src-block))
# eval: (setq-local org-confirm-babel-evaluate t)
# eval: (fmakunbound #'orgstrap--confirm-eval)
# End:
#+end_src
*NOTE* This set of local variables will only work if you don't use noweb or if your
copy of org-mode has had the patch for =org-babel-check-confirm-evaluate= applied.
This either means you have applied the manual patch below, or the following commit
is in the tree of the code you are running. Unfortunately this is not in emacs 27.1,
but it is in =maint= so it should make it into core next time there is a sync.
https://code.orgmode.org/bzg/org-mode/commit/df5a83637518ad9aa586d49884a6271f11afc592

Version =0.1= of the =orgstrap= local variables described below has a portable version
that works with unpatched versions of org-mode.
#+name: org-babel-check-confirm-evaluate-patch
#+begin_src diff
diff --git a/lisp/ob-core.el b/lisp/ob-core.el
index e798595bd..230706b7f 100644
--- a/lisp/ob-core.el
+++ b/lisp/ob-core.el
@@ -238,7 +238,10 @@ (defun org-babel-check-confirm-evaluate (info)
                    (if (functionp org-confirm-babel-evaluate)
                        (funcall org-confirm-babel-evaluate
                                 ;; Language, code block body.
-                                (nth 0 info) (nth 1 info))
+                                (nth 0 info)
+                                (if (org-babel-noweb-p headers :eval)
+                                    (org-babel-expand-noweb-references info)
+                                  (nth 1 info)))
                      org-confirm-babel-evaluate))))
     (cond
      (noeval nil)
#+end_src
* Inspiration
By default =org-mode= source block headers can only take existing elisp functions as arguments.

This means that header arguments can become extremely verbose.

Wouldn't it be great if you could use the magical mystical power of =defun=
inside an org file itself to provide simple, reusable functionality rather
than +copying and pasting+ +yanking and putting+ killing and yanking raw
elisp around the buffer?

With =orgstrap= you can.

=orgstrap= makes sure that the functionality that you need is available when you need it.
Whether it is =(defun dir-tramp-sudo (host) (format "/ssh:%s|sudo:%s:" host host))= to
simplify a pattern for remote execution when using the =:dir= header, or a function to
detect and set the right environment variables, =orgstrap= is there for you.
* Use cases
=orgstrap= essentially specifies a plain-text executable file format.
Thus, in principle it can be used for literally anything.

While I personally find this to be totally radically awesome, there are much
better, saner, and safer ways to execute arbitrary code than to hash some elisp
source blocks and use emacs file local variables to automatically eval a specially
named[fn::Since all the conventions for how this is done are defined locally by each
file you can rename the special block however you see fit, perhaps from =orgstrap= to
=main= if need to pretend that the file is actually c source code with some special syntax.]
source block only when it matches the hash.

#+name: table-use-cases
#+caption: Things you can do with arbitrary code execution.
|----------------------------------------+------------+--------------------------------|
| Use case                               | Good idea  | Alternative                    |
|----------------------------------------+------------+--------------------------------|
| Always run defuns used in file         | Yes        | init.el, =C-c C-c=             |
| Install elisp code directly            | No         | Use packages.el                |
| Self tangling files                    | I do it    | =C-c C-v C-t=                  |
| Install packages required by file      | Probably   | System package manager         |
| Create an emacs based botnet           | Definitely | ???                            |
| Replace hard to follow instructions    | Yes        | Hard to follow instructions    |
| Tangle git hook files for publishing   | Yes        | Manually tangle                |
| System specific behavior without edits | Yes        | #+name: literal blocks via =:= |
| Version control for source blocks      | Please no  | git, hg, svn, anything please  |
| Detect and set environment variables   | Yes        |                                |
|----------------------------------------+------------+--------------------------------|
# Actually I'm kind of hyped for though of describing the system used to version
# control the code in the file itself. Not so simple to pull off though.
# It only sort of works in this case because we have the rest of the file under
# version control in another system.
* Details
The first emacs lisp source block named =orgstrap= in an org file is
automatically run using the =exec:= file local variable. Users can
review and add the file local variables to their known safe list
so that the code can be run in the future without the need to
bother them again.

This is the =orgstrap= block that is used for this file.
#+name: orgstrap
#+begin_src elisp :results none :noweb no-export
;; This is an example that also nowebs in the source for
;; `orgstrap-get-block-checksum' so it is easy to
;; use this pattern to create and update orgstrap blocks
(defun orgstrap-demo-function (arg)
  (if arg "yes" "no"))

<<orgstrap-edit-helper-defuns>>
<<orgstrap-init-helper-defuns>>
<<orgstrap-install-helper-defuns>>

(defun orgstrap-add-checksum-and-tangle-on-change ()
  "Use with the `before-save-hook' local variable to test whether the
checksum of the orgstrap block has changed and if so tangle the file."
  (let* ((elv (orgstrap--read-current-local-variables))
         (checksum-existing (assoc 'orgstrap-block-checksum elv))
         (checksum (orgstrap-add-block-checksum)))
    (unless (eq checksum-existing checksum)
      (remove-hook 'before-save-hook #'orgstrap-add-checksum-and-tangle-on-change t)
      ;; have to remove the hook because for some reason tangling from a buffer
      ;; counts as saving from that buffer?
      (org-babel-tangle)
      (add-hook 'before-save-hook #'orgstrap-add-checksum-and-tangle-on-change 0 t))))

(add-hook 'before-save-hook #'orgstrap-add-checksum-and-tangle-on-change 0 t)
;; this is kind of evil because `before-save-hook' is a risky local variable
;; which you can't accept permanently because someone could rebind the name
;; in this context it is not quite as risky because we can see what it is
;; being bound to right here, though that could be changed in the future

(message "orgstrap complete!")
#+end_src

Here is the full source of the block above. 
#+name: orgstrap-example
#+begin_example org :eval never :noweb no
,#+name: orgstrap
,#+begin_src elisp :results none :noweb no-export
;; This is an example that also nowebs in the source for
;; `orgstrap-get-block-checksum' so it is easy to
;; use this pattern to create and update orgstrap blocks
(defun orgstrap-demo-function (arg)
  (if arg "yes" "no"))

<<orgstrap-edit-helper-defuns>>
<<orgstrap-init-helper-defuns>>
<<orgstrap-install-helper-defuns>>

(defun orgstrap-add-checksum-and-tangle-on-change ()
  "Use with the `before-save-hook' local variable to test whether the
checksum of the orgstrap block has changed and if so tangle the file."
  (let* ((elv (orgstrap--read-current-local-variables))
         (checksum-existing (assoc 'orgstrap-block-checksum elv))
         (checksum (orgstrap-add-block-checksum)))
    (unless (eq checksum-existing checksum)
      (remove-hook 'before-save-hook #'orgstrap-add-checksum-and-tangle-on-change t)
      ;; have to remove the hook because for some reason tangling from a buffer
      ;; counts as saving from that buffer?
      (org-babel-tangle)
      (add-hook 'before-save-hook #'orgstrap-add-checksum-and-tangle-on-change 0 t))))

(add-hook 'before-save-hook #'orgstrap-add-checksum-and-tangle-on-change 0 t)
;; this is kind of evil because `before-save-hook' is a risky local variable
;; which you can't accept permanently because someone could rebind the name
;; in this context it is not quite as risky because we can see what it is
;; being bound to right here, though that could be changed in the future

(message "orgstrap complete!")
,#+end_src
#+end_example

You could chain this block to run other blocks as well but they will
require confirmation so you would need to reused the code from
ref:local-variables-readable. It is simpler to use noweb syntax like
I do in the ref:orgstrap block for this file.

If you use noweb syntax and you make changes to a webbed block you will
need to run ref:do-orgstrap-add-block-checksum again since the checksum
will change.

Additional machinery is provided as part of this file to update the local
variable value of =orgstrap-block-checksum= so that only known blocks can
be run. Note that this DOES NOT PROTECT against someone changing the block
and the checksum at the same time and sending you a malicious file! You need
an alternate and trusted source against which to verify the checksum of the
bootstrap block.
* Code
** Get the checksum of the =orgstrap= block for the current file
You can copy the ref:do-orgstrap-add-block-checksum block into any org file
that contains a block with =#+name: orgstrap= and then run it with =C-c C-c=
after you have run the ref:orgstrap-helper-defuns block in this file.

Note that ref:orgstrap-helper-defuns is nowebbed into the ref:orgstrap
block for this file. Therefore if you allow(ed) local variables for this
file then ref:orgstrap-helper-defuns will be (was already) run for you.

#+name: do-orgstrap-add-block-checksum
#+begin_src elisp :exports code
(orgstrap-add-block-checksum)
#+end_src

#+RESULTS: do-orgstrap-add-block-checksum
: b30de1950d8d39b69ecf445bb2b922332fd8506e228e670b0f6560dff2da4697

** =orgstrap= implementation
Functions to calculate =orgstrap-block-checksum= and set it as a file local variable.
Add the necessary local variables to the end of the file.
# [[info:elisp#File Local Variables][info:elisp#File Local Variables]] a useful reference
*** Edit
#+name: orgstrap-edit-helper-defuns
#+begin_src emacs-lisp :results none :lexical yes
;;; edit helpers
(defvar orgstrap-orgstrap-block-name "orgstrap"
  "Set to orgstrap by convention to make it easier to search for orgstrap
if someone encounters an orgstrapped file and wants to know what is going on.")

(defvar orgstrap-default-cypher 'sha256
  "default cypher passed to `secure-hash' when hashing blocks")

;; edit utility functions
(defun orgstrap--current-buffer-cypher ()
  "Return the cypher used for the current buffer `orgstrap-cypher' or
`orgstrap-default-cypher' if there is not buffer local cypher"
  (if (boundp 'orgstrap-cypher) orgstrap-cypher orgstrap-default-cypher))

(defun orgstrap--expand-body (info)
  "expand noweb references if noweb is set"
  (let ((coderef (nth 6 info))
        (expand
         (if (org-babel-noweb-p (nth 2 info) :eval)
             (org-babel-expand-noweb-references info)
           (nth 1 info))))
    (if (not coderef)
        expand
      (replace-regexp-in-string
       (org-src-coderef-regexp coderef) "" expand nil nil 1))))

(defmacro orgstrap--with-block (blockname &rest macro-body)
  "Go to a named source block and do something.
The macro provides local bindings for four names: `info', `params', `body-unexpanded', and `body'."
  (declare (indent defun))
  ;; consider accepting :lite or a keyword or something to pass
  ;; lite as an optional argument to `org-babel-get-src-block-info'
  ;; e.g. via (lite (equal (car macro-body) :lite)), given the
  ;; behavior when lite is not nil and the expected useage of this
  ;; macro I don't think we would ever want to pass a non nil lite
  `(save-excursion
     (let ((inhibit-message t)) ; inhibit-message only blocks from the message area not the log
       (org-babel-goto-named-src-block ,blockname))
     (unwind-protect
         (let* ((info (org-babel-get-src-block-info))
                (params (nth 2 info))
                (body-unexpanded (nth 1 info))
                ;; from `org-babel-check-confirm-evaluate'
                ;; and `org-babel-execute-src-block'
                (body (orgstrap--expand-body info)))
           ,@macro-body)
       (org-mark-ring-goto))))

;; edit user facing functions
(defun orgstrap-get-block-checksum (&optional cypher)
  "Calculate the `orgstrap-block-checksum' block for the current buffer."
  (interactive)
  (orgstrap--with-block orgstrap-orgstrap-block-name
    (let ((cypher (or cypher (orgstrap--current-buffer-cypher)))
          (body-normalized (let ((print-quoted nil)) (prin1-to-string (read (concat "(progn\n" body "\n)"))))))
      (let ((print-escape-newlines t))  ; needed to preserve the escaped newlines
        (with-current-buffer (create-file-buffer (format "/tmp/body-norm-%s" emacs-major-version))
          (erase-buffer)
          (insert body-normalized))
        ;;(message "%S" body-normalized)
        (message "%s" (secure-hash cypher body-normalized)))
      (secure-hash cypher body-normalized))))

(defun orgstrap-add-block-checksum (&optional cypher)
  "Add new value of `orgstrap-block-checksum' to file local variables of the `current-buffer'
The optional `cypher' argument should almost never be used, instead change the value of
`orgstrap-default-cypher' or manually change the file property line variable."
  (interactive)
  (let* ((cypher (or cypher (orgstrap--current-buffer-cypher)))
         (orgstrap-block-checksum (orgstrap-get-block-checksum cypher)))
    (when orgstrap-block-checksum
      (save-excursion
        (add-file-local-variable-prop-line 'orgstrap-cypher cypher)
        (add-file-local-variable-prop-line 'orgstrap-block-checksum (intern orgstrap-block-checksum))))
    orgstrap-block-checksum))
#+end_src
*** Init
# Aaaaaaand of course there is a bug in `add-file-local-variable' which makes it
# impossible to write an escaped newline and somehow allows only an actual newline
# or a double escaped ... sigh
#+name: orgstrap-init-helper-defuns
#+begin_src emacs-lisp :results none :lexical yes
;;; init helpers
(defvar orgstrap-link-message "jump to the orgstrap block for this file"
  "default message for file internal links")

(defconst orgstrap--default-local-variables-block-version "0.1"
  "end of file local variables verion, used to set visible version number
in the file local variables in `orgstrap--add-file-local-variables'")

(defconst orgstrap--local-variable-eval-commands-0.1
  '((defun orgstrap--expand-body (info)
      "expand noweb references if noweb is set"
      (let ((coderef (nth 6 info))
            (expand
             (if (org-babel-noweb-p (nth 2 info) :eval)
                 (org-babel-expand-noweb-references info)
               (nth 1 info))))
        (if (not coderef)
            expand
          (replace-regexp-in-string
           (org-src-coderef-regexp coderef) "" expand nil nil 1))))
    (defun orgstrap--confirm-eval (lang body)
      "non-nil => prompt"
      (not (and (member lang '("elisp" "emacs-lisp"))
                (let* ((body (orgstrap--expand-body (org-babel-get-src-block-info)))
                       (content-checksum
                        (intern
                         (secure-hash
                          orgstrap-cypher
                          (let ((print-quoted nil)
                                (print-escape-newlines t))
                            (prin1-to-string (read (concat "(progn\n" body "\n)"))))))))
                  ;;(message "%s %s" orgstrap-block-checksum content-checksum)
                  (eq orgstrap-block-checksum content-checksum)))))
    (setq-local org-confirm-babel-evaluate #'orgstrap--confirm-eval)
    (save-excursion (org-babel-goto-named-src-block "orgstrap") (org-babel-execute-src-block))
    (setq-local org-confirm-babel-evaluate t)
    (fmakunbound #'orgstrap--confirm-eval)))

(defconst orgstrap--local-variable-eval-commands-0.2
  '((defun orgstrap--confirm-eval (lang body)
      (not (and (member lang '("elisp" "emacs-lisp"))
                (eq orgstrap-block-checksum
                    (intern
                     (secure-hash
                      orgstrap-cypher
                      (let ((print-quoted nil)
                            (print-escape-newlines t))
                        (prin1-to-string (read (concat "(progn\n" body "\n)"))))))))))
    (setq-local org-confirm-babel-evaluate #'orgstrap--confirm-eval)
    (save-excursion (org-babel-goto-named-src-block "orgstrap") (org-babel-execute-src-block))
    (setq-local org-confirm-babel-evaluate t)
    (fmakunbound #'orgstrap--confirm-eval)))

(defun orgstrap--local-variable-eval-commands (&optional version)
  (let ((version (or version orgstrap--default-local-variables-block-version)))
    (pcase version
      ("0.1" orgstrap--local-variable-eval-commands-0.1)
      ("0.2" orgstrap--local-variable-eval-commands-0.2))))

;; init utility functions

(defun orgstrap--new-heading-elisp-block (heading block-name &optional header-args noexport)
  "Create a new elisp source block in a new heading at the top of the current file.
`header-args' is an alist of symbols that are converted to strings"
  (save-excursion
    (goto-char (point-min))
    (org-next-visible-heading 1)  ;; alternately outline-next-heading
    (org-meta-return)
    (org-edit-headline heading)
    (when noexport (org-set-tags "noexport"))
    (move-end-of-line 1)
    (insert "\n#+name: " block-name "\n")
    (org-insert-structure-template "src")
    (insert "elisp")
    (mapcar (lambda (header-arg-value)
              (org-babel-insert-header-arg
               (symbol-name (car header-arg-value))
               (symbol-name (cdr header-arg-value))))
            header-args)))

(defun orgstrap--trap-hack-locals (command &rest args)
  "Advise `hack-local-variables-filter' to do nothing but set `orgstrap--local-variables'
to the reversed list of read variables which are the first argument in the lambda list."
  ;;(message "%s" (reverse (car args)))
  (setq-local orgstrap--local-variables (reverse (car args)))
  nil)

(defun orgstrap--read-current-local-variables ()
  "Read and return the local variables for the current file without applying them."
  (interactive)
  ;; orgstrap--local-variables is a temporary local variable that is used to
  ;; capture the input to `hack-local-variables-filter' it is unset at the end
  ;; of this function so that it cannot accidentally be used when it might be stale
  (set (make-local-variable 'orgstrap--local-variables) nil)
  (let ((enable-local-variables t))
    (advice-add #'hack-local-variables-filter :around #'orgstrap--trap-hack-locals)
    (unwind-protect
        (hack-local-variables nil)
      (advice-remove #'hack-local-variables-filter #'orgstrap--trap-hack-locals))
    (let ((local-variables orgstrap--local-variables))
      (makunbound 'orgstrap--local-variables)
      local-variables)))

(defun orgstrap--add-link-to-orgstrap-block (&optional link-message)
  "Add an org-mode internal link pointing to the orgstrap block
in a comment on the second line of the file."
  (interactive)  ; TODO prompt for message with C-u ?
  (goto-char (point-min))
  (next-logical-line)  ; use logical-line to avoid issues with visual line mode
  (let ((link-message (or link-message orgstrap-link-message)))
    (unless (save-excursion (re-search-forward
                             (format "^# \\[\\[file:::%s\\]\\[.+\\]\\]$"
                                     orgstrap-orgstrap-block-name)
                             nil t))
      (insert (format "# [[file:::%s][%s]]\n"
                      orgstrap-orgstrap-block-name
                      (or link-message orgstrap-link-message))))))

(defun orgstrap--add-orgstrap-block ()
  "Add a new emacs lisp source block with #+name: orgstrap
to the current buffer or raise an error if one already exists."
  (interactive)
  (let ((all-block-names (org-babel-src-block-names)))
    (if (member orgstrap-orgstrap-block-name all-block-names)
        (message "orgstrap block already exists not adding!")
      (orgstrap--new-heading-elisp-block "Bootstrap"
                                         orgstrap-orgstrap-block-name
                                         '((results . none)
                                           (lexical . yes))
                                         t)
      (orgstrap--with-block orgstrap-orgstrap-block-name
        ;;(error "TODO insert some minimal message or something")
        nil))))

(defun orgstrap--add-file-local-variables (&optional version)
  "Add the file local variables needed to make orgstrap work.
switching comments probably wont work ? we can try
Use a prefix argument (i.e. C-u) to add file local variables comments instead of in a :noexport:"
  (interactive)
  (let* ((version (or version orgstrap--default-local-variables-block-version))
         (lv-commands (orgstrap--local-variable-eval-commands version))
         (elv (orgstrap--read-current-local-variables))
         (commands-existing (mapcar #'cdr (seq-filter (lambda (l) (eq (car l) 'eval)) elv))))
    ;; good enough to start
    (cond ((equal commands-existing lv-commands) nil)
          ((not commands-existing)
           (let ((print-escape-newlines t))  ; needed to preserve the escaped newlines
             (add-file-local-variable 'orgstrap-local-variables-block-version
                                      version)
             (mapcar (lambda (sexp) (add-file-local-variable 'eval sexp))
                     lv-commands)))
          ;; we could try to do something fancy here, but it is much simpler
          ;; to just alert the user and have them fix it
          (t (error "Existing eval commands that do not match the commands to be installed have been detected. Please remove those commands and run `orgsrap-add-file-local-variables' again or manually add the orgstrap file local variables. The existing commands are as follows.\n%s" commands-existing)))))

;; init user facing functions
(defun orgstrap-init ()
  "Initialize orgstrap in the current buffer."
  (interactive)
  (when (not (eq major-mode 'org-mode))
    (error "Cannot orgstrap, buffer not in org-mode it is in %s!" major-mode))
  ;; TODO orgstrap-mode? Doesn't quite make sense since it is a one shot thing.
  ;; TODO option for no link?
  ;; TODO option for local variables in comments vs noexport
  (save-excursion
    (orgstrap--add-orgstrap-block)
    (orgstrap-add-block-checksum)
    (orgstrap--add-link-to-orgstrap-block)
    ;; FIXME sometimes local variables don't populate due to an out of range error
    (orgstrap--add-file-local-variables)))

;;(defvar orgstrap--helpers nil)
;;(setq orgstrap--helpers nil)
;;; TODO
;; options are link to docs
;; embed (defun orgstrap-install-helpers () (interactive) (use-package orgstrap)) or similar
;; embed all of this block or orgstrap.el in a block in * orgstrap helpers :noexport: 
#+end_src
*** TODO Install
#+name: orgstrap-install-helper-defuns
#+begin_src emacs-lisp :results none
;; install helpers
(defun orgstrap-install-orgstrap () (error "TODO"))
(defun orgstrap--add-install-block () (error "TODO"))
(defun orgstrap--add-helper-block (&optional block-name)
  "Embed one of the orgstrap helpers blocks (aka orgstrap.el) in the current buffer so that anyone
encountering the file in the future has all the tools they need to make changes without
requiring any additional steps."
  ;; TODO minimal vs maximal, edit files vs propagate orgstrap
  ;; go to start of file
  ;; look for first heading
  ;; insert before first heading (so it is visible and users can reorder as needed)
  ;; insert source block
  (let ((block-name (or block-name orgstrap-helper-block-name)))

    (orgstrap--new-heading-elisp-block "orgstrap-helpers"
                                       orgstrap-helper-block-name
                                       '((results . none)
                                         (lexical . yes))
                                       t)

    (orgstrap--with-block orgstrap-helper-block-name
      (error "TODO")
      )))
#+end_src
** orgstrap.el :noexport:
# XXX TODO it would be a super cool feature if xref could resolve to elisp source
# blocks in org-mode files, because then half the need for the .el file would go away
#+name: orgstrap.el
#+caption: Retangle this if something changes.
#+header: :exports none
#+begin_src elisp :noweb yes :eval never :tangle ./orgstrap.el
;;; orgstrap.el --- Bootstrap an org-mode file using file local variables -*- lexical-binding: t -*-

;; Author: Tom Gillespie
;; URL: https://github.com/tgbugs/orgstrap

;;;; License and Commentary

;; License:
;; GPLv3

;;; Commentary:

;; The license for the orgstrap.el code reflects the fact that
;; `orgstrap-get-block-checksum' reuses code from
;; `org-babel-check-confirm-evaluate' which is
;; (at the time of writing) in ob-core.el and licensed
;; as part of emacs.

;; Code in an orgstrap block is usually meant to be executed directly by its
;; containing org file. However, if the code is something that will be reused
;; over time outside the defining org file then it may be better to tangle and
;; load the file so that it is easier to debug/xref functions. This code in
;; particular is also tangled for inclusion in one of the *elpas so as to protect
;; the orgstrap namespace.

;;; Code:

<<orgstrap-edit-helper-defuns>>

<<orgstrap-init-helper-defuns>>

<<orgstrap-install-helper-defuns>>

(provide 'orgstrap)

;;; orgstrap.el ends here
#+end_src
* Local Variables
Local variables must go at the end of a file.
We have to use =setq= on =org-confirm-babel-evaluate= because it is marked
as a =safe-local-variable=. In this context this workaround seems reasonable
and not malicious because the use of =eval:= should alert users that some
arbitrary stuff is going on and that they should check it very carefully.

Here is a more readable version of what the compacted local variables code
at the end of the file is doing. *Make sure to check that the code matches.*
# TODO it is entirely possible to automate that check.

=(prin1-to-string (read (concat "(progn\n" body "\n)")))= is used to normalize the code in
the orgstrap block, removing any comments and formatting irregularities.
This is important for two reasons. First it helps prevent denial of service
attacks against human auditors who have low bandwidth for detecting fiddly
changes.
# FIXME prin1-to-string IS NOT PORTABLE TO EMACS 26 WAT !?!?!?
# quote vs ' issues with that, how to revert/find something consistent, or maybe it is read !??!
# this is indeed a change in how message is working
# all of these issues are caused by a change in the default for `print-quoted' from t to nil
#+begin_src bash :results output code :wrap "src elisp"
emacs-28-vcs -Q --batch --eval "(message \"%s\" (read \"'(hello world)\"))" 2>&1
emacs-27 -Q --batch --eval "(message \"%s\" (read \"'(hello world)\"))" 2>&1
emacs-26 -Q --batch --eval "(message \"%s\" (read \"'(hello world)\"))" 2>&1
emacs-25 -Q --batch --eval "(message \"%s\" (read \"'(hello world)\"))" 2>&1
emacs-24 -Q --batch --eval "(message \"%s\" (read \"'(hello world)\"))" 2>&1
emacs-23 -Q --batch --eval "(message \"%s\" (read \"'(hello world)\"))" 2>&1
# emacs-18 -Q --batch --eval "(message \"%s\" (read \"'(hello world)\"))" 2>&1

#emacs-27 -q --batch --eval "(message \"%s\" '(asdf))" 2>&1
#emacs-26 -q --batch --eval "(message \"%s\" '(asdf))" 2>&1

emacs-28-vcs -Q --batch --eval "(message \"%s\" (read \"(quote (hello world))\"))" 2>&1
emacs-27 -Q --batch --eval "(message \"%s\" (read \"(quote (hello world))\"))" 2>&1
emacs-26 -Q --batch --eval "(message \"%s\" (read \"(quote (hello world))\"))" 2>&1
emacs-25 -Q --batch --eval "(message \"%s\" (read \"(quote (hello world))\"))" 2>&1
emacs-24 -Q --batch --eval "(message \"%s\" (read \"(quote (hello world))\"))" 2>&1
emacs-23 -Q --batch --eval "(message \"%s\" (read \"(quote (hello world))\"))" 2>&1

emacs-28-vcs -Q --batch --eval "(message \"%s\" ''(hello world))" 2>&1
emacs-27 -Q --batch --eval "(message \"%s\" ''(hello world))" 2>&1
emacs-26 -Q --batch --eval "(message \"%s\" ''(hello world))" 2>&1
emacs-25 -Q --batch --eval "(message \"%s\" ''(hello world))" 2>&1
emacs-24 -Q --batch --eval "(message \"%s\" ''(hello world))" 2>&1
emacs-23 -Q --batch --eval "(message \"%s\" ''(hello world))" 2>&1

# princ prin1 print all have the same issue, pp on the other hand seems to be consistent
emacs-28-vcs -Q --batch --eval "(pp ''(hello world))" 2>&1
emacs-27 -Q --batch --eval "(pp ''(hello world))" 2>&1
emacs-26 -Q --batch --eval "(pp ''(hello world))" 2>&1
emacs-25 -Q --batch --eval "(pp ''(hello world))" 2>&1
emacs-24 -Q --batch --eval "(pp ''(hello world))" 2>&1
emacs-23 -Q --batch --eval "(pp ''(hello world))" 2>&1


#+end_src

#+RESULTS:
#+begin_src elisp
'(hello world)
'(hello world)
(quote (hello world))
(quote (hello world))
(quote (hello world))
(quote (hello world))
'(hello world)
'(hello world)
(quote (hello world))
(quote (hello world))
(quote (hello world))
(quote (hello world))
'(hello world)
'(hello world)
(quote (hello world))
(quote (hello world))
(quote (hello world))
(quote (hello world))
'(hello world)
'(hello world)
'(hello world)
'(hello world)
'(hello world)
'(hello world)
#+end_src

This makes it possible to add comments to the code without changing the checksum this
hopefully reduces one of the obstacles to enhancing the
documentation of orgstrap code and blocks over time when
the meaningful code itself has not changed

#+name: local-variables-readable
#+begin_src emacs-lisp :results output raw :wrap "src emacs-lisp :eval never" :exports results :eval no-export
(princ ";; code for modeline at the top of file\n")
(pp `(setq-local orgstrap-cypher ',orgstrap-default-cypher))
(pp `(setq-local orgstrap-block-checksum 'sha256-sum-of-the-orgstrap-block))
(princ ";; code for local variables\n;;XXX VERIFY THAT YOUR LOCAL VARIABLES MATCH WHAT YOU SEE HERE\n")
(pp `(setq-local 'orgstrap-local-variables-block-version ,orgstrap--default-local-variables-block-version))
(mapcar #'pp (orgstrap--local-variable-eval-commands))
#+end_src

#+RESULTS: local-variables-readable
#+begin_src emacs-lisp :eval never
;; code for modeline at the top of file
(setq-local orgstrap-cypher 'sha256)
(setq-local orgstrap-block-checksum 'sha256-sum-of-the-orgstrap-block)
;; code for local variables
;;XXX VERIFY THAT YOUR LOCAL VARIABLES MATCH WHAT YOU SEE HERE
(setq-local 'orgstrap-local-variables-block-version "0.1")
(defun orgstrap--expand-body (info)
  "expand noweb references if noweb is set"
  (let ((coderef (nth 6 info))
        (expand (if (org-babel-noweb-p (nth 2 info) :eval)
                    (org-babel-expand-noweb-references info)
                  (nth 1 info))))
    (if (not coderef)
        expand
      (replace-regexp-in-string (org-src-coderef-regexp coderef) "" expand nil nil 1))))
(defun orgstrap--confirm-eval (lang body)
  "non-nil => prompt"
  (not (and (member lang '("elisp" "emacs-lisp"))
            (let* ((body (orgstrap--expand-body (org-babel-get-src-block-info)))
                   (content-checksum
                    (intern
                     (secure-hash
                      orgstrap-cypher
                      (let ((print-quoted nil)
                            (print-escape-newlines t))
                        (prin1-to-string
                         (read (concat "(progn\n" body "\n)"))))))))
              (eq orgstrap-block-checksum content-checksum)))))
(setq-local org-confirm-babel-evaluate #'orgstrap--confirm-eval)
(save-excursion
  (org-babel-goto-named-src-block "orgstrap")
  (org-babel-execute-src-block))
(setq-local org-confirm-babel-evaluate t)
(fmakunbound #'orgstrap--confirm-eval)
#+end_src

Here is what the modeline at the start of the file looks like.
#+name: local-variables-example-header
#+begin_example org
# -*- orgstrap-cypher: sha256; orgstrap-block-checksum: b30de1950d8d39b69ecf445bb2b922332fd8506e228e670b0f6560dff2da4697; no-klobber-test: "I should still be here after it is all over!"; -*-
#+end_example

Here is what the =:noexport:= block below this looks like.
#+name: local-variables-example-footer
#+begin_example org
,* Local Variables Footer :noexport:
Local Variables:
orgstrap-local-variables-block-version: "0.1"
eval: (defun orgstrap--expand-body (info) "expand noweb references if noweb is set" (let ((coderef (nth 6 info)) (expand (if (org-babel-noweb-p (nth 2 info) :eval) (org-babel-expand-noweb-references info) (nth 1 info)))) (if (not coderef) expand (replace-regexp-in-string (org-src-coderef-regexp coderef) "" expand nil nil 1))))
eval: (defun orgstrap--confirm-eval (lang body) "non-nil => prompt" (not (and (member lang '("elisp" "emacs-lisp")) (let* ((body (orgstrap--expand-body (org-babel-get-src-block-info))) (content-checksum (intern (secure-hash orgstrap-cypher (let ((print-quoted nil) (print-escape-newlines t)) (prin1-to-string (read (concat "(progn\n" body "\n)")))))))) (eq orgstrap-block-checksum content-checksum)))))
eval: (setq-local org-confirm-babel-evaluate #'orgstrap--confirm-eval)
eval: (save-excursion (org-babel-goto-named-src-block "orgstrap") (org-babel-execute-src-block))
eval: (setq-local org-confirm-babel-evaluate t)
eval: (fmakunbound #'orgstrap--confirm-eval)
End:
#+end_example
* Best practices
** Use the system package manager.
There is a big difference between using a script to install a program directly
from the internet and using a script to ask the host system to install a program.

Even if you audit a random script from the internet it is unlikely that you will
be able to do due diligence. On the other hand, if you ask your system package
manager to install something for you, there is a much better chance that it has
at least been somewhat audited, and there is usually an existing process for
getting a package into the system which helps to mitigate certain types of attacks.

To give a military example it is the difference between inspecting and accepting a
package from a random person because they say you asked for it yesterday (maybe you
did!) versus only every allowing packages to come through procurement. You are much
less likely to get a bomb or a packaged rigged to exfil data if you go through
procurement because there is an established process for how to do things and that
process enshrines generations experience about how to not get blown up by the pizza guy.

So, if you are writing instructions that require a certain tool, it is better to tell
whoever is following them to ask procurement to get the tool for them than to tell them
to going out to the hardware store and get it themselves, or worse, give them the address
of a random tool delivery man who happens to be a good buddy of yours. Even if everyone
involved is trustworthy those kinds of relationships are much easier for some third party
to compromise and use for their own purposes.

The obvious corollary when you are the user rather than the author, is that if you
encounter instructions that ask you to directly install software from a random place
you should be suspicious, even, perhaps especially, if that random place is housed
within a larger reputable site. If you're not in a hurry, ask for the software to be
packaged, or package it yourself so that it can go through the process.
* Future work
:PROPERTIES:
:CUSTOM_ID: future-work
:END:
** Security considerations
=orgstrap= currently does not check all the headers or vars properties that materialized
onto a source block we probably need to do this. For the time being users need to check
for any hidden header properties that might be attached if the source block is buried
within a tree somewhere.
** Run once
In principle the simplest way to do this is to use the =:cache yes= header on a block.
However, unless the state is persisted into a users =init.el= file or equivalent, then
the file would need a way to know that it had not been run when opened again in a new
emacs session. Similar issue with opening the same file in multiple emacs sessions at
the same time. The block simply will not run again if the cached result is present.

Therefore, since =:cache yes= by itself is a dead end for ensuring that functionality
is always available any time a file is loaded there are a couple of options.
1. Persist to =init.el=. This is evil.
2. Request to tangle and install as package.
   A variant of this is simply to use packages.el to install
   the desired functionality in a persistent way in combination
   with accept klobbering.
3. Figure out how to transparently wrap an elisp block in =unless=.
4. Advise =defun= (say what!?)?  @@comment: TERROR@@
5. Figure out how to un-cache a block when emacs exits.
   This will fail in nasty, unpredictable, and hard to debug ways.
6. Set =:cache (if (boundp 'orgstrap-already-run) "yes" "no")=.
   This ALMOST works. If =:cache no= embedded the sha1 sum then
   we would be golden. *This seems like the best bet.*
7. Accept klobbering.
8. Advise org-babel-eval to run with org-babel-sha1-sum even when cache is not set to yes
** Tangle once
When bootstrapping a new system there are many times when want to create a
file only if it does not already exist. The =:tangle= header does not support
this use case, but we can implement it anyway using the example below.
#+name: tangle-once-example
#+begin_src org
,#+name: orgstrap
,#+begin_src elisp
(defun tangle-once (path) (if (file-exists-p path) "no" path))
,#+end_src

,#+begin_src bash :tangle (tangle-once "./path-to-tangle")
echo lol
,#+end_src
# I think I've seen this before but you apparently can't have ,#+end_src on the line before #+end_src ... fun bug
#+end_src
** Multiple blocks
There must be only a single one of those blocks so that the rest of
the blocks can safely use the functions defined in the orgstrap block. 

A single elisp block is sufficient to enable nearly all use cases involving
tangling source blocks to file without having to fight the prompts. However,
it is very much not sufficient for any use cases that involve other languages.
This is particularly an issue for org files that want to bootstrap whole systems.

The simplest solution to me seems to be to add a second prompt variable which is
an alist of source block checksums and names[fn::the names are not technically required
but are for human readability]. As soon as the =orgstrap= block is run
=orgstrap--confirm-eval= is no longer needed and can be replace with a function
that validates the other blocks from the prompt variable.

This seems like a tractable approach, but also over complicated because it is surely
easier in a case like this where blocks are very unlikely to be reused across org files
to simply =(setq-local org-confirm-babel-evaluate nil)= and tell people to audit the
whole file. The alternative in that case might be to hash all the source blocks and
validate all of them at once at the start of the orgstrap block. This might need some
additional machinery, not entirely sure, maybe just have =orgstrap-all-blocks-checksum=
that can be used in cases like that. The advantage here is that the core of the process
can be verified once and then the documentation around it can change and grow as needed.
** Remove defun docstrings from hashing
One additional source of noise in addition to comments are defun and
defmacro docstrings. These should be dropped from the tree if they are
present.
** Deterministic semantics preserving reordering
Reorder the expressions used in the orgstrap block alphabetically (or something like that)
according to a deterministic rule, but not in a way that changes program semantics.
For example a function definition cannot be moved after a top level invocation of that
function.
1. defuns with different names can be reordered
2. defuns with the same name can be reordered as a block but cannot
   internally be reordered because the order of shadowing matters
3. While it might be nice to completely erase the names of functions as well
   as internal variable names, this would make it trivial to shadow existing
   function names in ways that are malicious. The exact names matter, so we
   have to preserve them. Also the cost of not being able to tell that
   =(lambda (a) (+ a a))= and =(lambda (b) (+ b b))= are the same seems fairly
   small.
4. One potential approach is to lift all defuns to the top, and then function calls
   or whatever the more generic procedure invocation means. The simple local rule
   is that all definitions must occur before usage except in the case where there is
   a shadowing even that happens after a first invocation. This is annoying, but
   if a call to a function happens before that function is defined we have to assume
   that the call is calling some other function and those statements cannot be reordered.
   So the ordering is calls to functions with names matching any later defuns or
   any later assignment. Then defuns and assignments, finally procedure invocations
   which might also include assignments. I get the sense that this is covered under
   some part of compiler theory but can't quite put my finger on it.
** Auto update block checksum on save
Before save hook and/or before commit hook to automatically update the block checksum.
** TODO command to checksum the file local variables               :noexport:
** TODO use orgstrap to automatically keep example blocks in sync  :noexport:
** TODO melpa                                                      :noexport:
** TODO ruby org so that github can render footnotes correctly     :noexport:
[[file:~/git/NOFORK/org-ruby]]
* Background, file local variables, and checksums
As mentioned above, the primary use case for =orgstrap= was that I was sick of having
to work around the limitation that I had to do one of three things. I either one, had
to remember to eval the source block containing defuns used later before I could
eval other source blocks that used those functions in headers, or two, had to put those
functions in =init.el=, destroying ability to use org files as standalone self describing
portable and reusable computational artifacts, or three, had to copy and paste verbose
elisp bits around to achieve what I wanted. Furthermore, it is hard for humans to follow
all the steps needed to get everything working -- even when 'everything' is just invoking
=C-c C-c= on a single source block I still forget. This can lead to _bad things_
if some of those source blocks were interdependent, or proceeded with a nil, etc.

File local variables to the rescue!
I'm slightly embarrassed to say how long it took me to arrive at the current solution.
I had known for quite a while that file local variables are a pathway to +abilities that+
the evils of arbitrary code execution, but it didn't click that all I was looking for was
the ability to just run some arbitrary elisp code every time a particular file was loaded,
which of course is exactly what file local variables are for.

The only question then was how to avoid the very real dangers of enabling arbitrary code
execution of plain text. Actually it was more along the lines of "How can I keep org-babel
happy without also pwning myself?" Fortunately = org-confirm-babel-evaluate = can be customized
to be a function that accepts the body of the code to be evaluated. Therefore we can do the
following.

When creating a file.
1. *Hash the block to be run before distributing the file.*
   Make sure to test if there are any changes to the header.
   For example I have a bad habit of accidentally setting
   =:noweb no-export= incorrectly without the dash and that will
   prevent the checksum from updating if a nowebbed block changes.
2. *Embed the checksum in the file local variable property line.*
   The property line is highly visible as the first line of the
   file. This makes it easy for users to verify that the embedded
   checksum matches a known independent checksum (running step 2).
   Thus if the embedded checksum does not match a known checksum
   the user will notice, and if the code to be executed does not
   match the embedded checksum then the user will at least be
   prompted by org-mode to run the block even in the case where
   they accepted the file local variables. Emacs also prompts for
   verification of the property line value which is another
   opportunity for the user to check.
3. *Publish the checksum independent of the file itself.*
   It is trivial for someone to change the contents of the orgstrap block
   and rerun =M-x= =orgstrap-add-block-checksum=. Therefore known checksums
   need to be published independent of the files themselves.

When running a file.
1. *Audit, accept, and store permanently the eval file local variables.*
   Storing audited variables permanently is critical for improving signal to noise
   so that unexpected mismatches retain their salience and can elicit the correct
   response (i.e., suspicion).
   # XXX there may be an issue here if the property line tags along with the rest
   # because we want to be able to mark the exact variables used in this file
   # as safe and if they are couple to a random hash that is bad
2. *Audit the orgstrap block*
   I assume most people are not going to do this. However, one of the advantages
   of the current approach is that the same orgstrap blocks can be reused across
   multiple files which reduces the audit load such that one only needs to review
   unique orgstrap blocks, not all files. [fn::NOTE there are certain patterns inside
   blocks that are NOT safe to accept because they introduce a level of indirection
   that orgstrap cannot verify. Examples of these kinds of dangerous blocks are ones
   that make any reference to other blocks in the file via some means other than noweb.
   This isn't really surprising, and for use cases where =org-babel-execute-src-block=
   is called multiple times on different blocks, the default execution protection will
   work. In addition, any blocks which want to run automatically without prompting should
   use the =orgstrap--confirm-eval= function (see [[file:::#future-work][Future work]]).]
3. *Verify that the embedded checksum matches the independent checksum.*
   A known embedded checksum matching the content checksum only means that the content
   matches the content observed by the provider of the independent checksum
   (assuming no hash collisions).
4. *Observe whether org-mode complains that the orgstrap block has changed.*
* Local Variables Footer :noexport:
#+begin_src elisp :exports none
(defun orgstrap--confirm-eval (lang body) t)
(defun orgstrap--confirm-eval (lang body) nil)
(defun orgstrap--confirm-eval (lang body)
  "non-nil => prompt"
  (not (and (member lang '("elisp" "emacs-lisp"))
            (let ((content-checksum
                   (intern
                    (secure-hash
                     orgstrap-cypher
                     (let ((print-quoted nil)) (prin1-to-string (read (concat "(progn\n" body "\n)"))))))))
              (message "%s %s" orgstrap-block-checksum content-checksum)
              (eq orgstrap-block-checksum content-checksum)))))
' ; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAaa
(setq-local org-confirm-babel-evaluate #'orgstrap--confirm-eval)
#+end_src

# Local Variables:
# orgstrap-local-variables-block-version: "0.1"
# eval: (defun orgstrap--expand-body (info) "expand noweb references if noweb is set" (let ((coderef (nth 6 info)) (expand (if (org-babel-noweb-p (nth 2 info) :eval) (org-babel-expand-noweb-references info) (nth 1 info)))) (if (not coderef) expand (replace-regexp-in-string (org-src-coderef-regexp coderef) "" expand nil nil 1))))
# eval: (defun orgstrap--confirm-eval (lang body) "non-nil => prompt" (not (and (member lang '("elisp" "emacs-lisp")) (let* ((body (orgstrap--expand-body (org-babel-get-src-block-info))) (content-checksum (intern (secure-hash orgstrap-cypher (let ((print-quoted nil) (print-escape-newlines t)) (prin1-to-string (read (concat "(progn\n" body "\n)")))))))) (eq orgstrap-block-checksum content-checksum)))))
# eval: (setq-local org-confirm-babel-evaluate #'orgstrap--confirm-eval)
# eval: (save-excursion (org-babel-goto-named-src-block "orgstrap") (org-babel-execute-src-block))
# eval: (setq-local org-confirm-babel-evaluate t)
# eval: (fmakunbound #'orgstrap--confirm-eval)
# End:
